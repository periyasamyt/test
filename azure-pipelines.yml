trigger:
- '*'

pool:
 name: 'MyAgentPool'
 demands:
    - npm

variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'WebApplication26/wwwroot'
  dotnetSdkVersion: '3.1.100'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
  inputs:
    version: '$(dotnetSdkVersion)'

- task: UseDotNet@2
  displayName: 'Use .NET Core SDK 2.1.505 for SonarCloud'
  inputs:
    version: '2.1.505'

#- script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
 # displayName: 'Compile Sass assets'

#- task: gulp@1
 # displayName: 'Run gulp tasks'

- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: $(wwwrootDir)

- task: NuGetCommand@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    restoreSolution: '**/*.sln'
    feedsToUse: 'select'
    vstsFeed: 'Test/Test.Models'

- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: SonarCloudPrepare@1
  displayName: 'Prepare SonarCloud analysis'
  inputs:
    SonarCloud: 'sonarcloud connection 1'
    organization: '$(SonarOrganization)'
    scannerMode: 'MSBuild'
    projectKey: '$(SonarProjectKey)'
    projectName: '$(SonarProjectName)'
    projectVersion: '$(Build.BuildNumber)'
    extraProperties: |
     sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/TestResults/Coverage/coverage.opencover.xml
     sonar.exclusions=**/wwwroot/lib/**/*
  condition: |
            and(succeeded(),
            eq(variables['Build.Reason'], 'PullRequest'),
            eq(variables['System.PullRequest.TargetBranch'], 'master'))
    

- task: DotNetCoreCLI@2
  displayName: 'Build the project - $(buildConfiguration)'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration $(buildConfiguration)'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Run unit tests - $(buildConfiguration)'
  inputs:
    command: 'test'
    arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat="cobertura%2copencover" /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
    publishTestResults: true
    projects: '**/*Tests.csproj'

- task: reportgenerator@4
  inputs:
    reports: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
    targetdir: '$(Build.SourcesDirectory)/CodeCoverage'

- task: SonarCloudAnalyze@1
  displayName: 'Run SonarCloud code analysis'
  condition: |
            and(succeeded(),
            eq(variables['Build.Reason'], 'PullRequest'),
            eq(variables['System.PullRequest.TargetBranch'], 'master'))

- task: SonarCloudPublish@1
  displayName: 'Publish SonarCloud quality gate results'
  condition: |
            and(succeeded(),
            eq(variables['Build.Reason'], 'PullRequest'),
            eq(variables['System.PullRequest.TargetBranch'], 'master'))

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

- task: DotNetCoreCLI@2
  displayName: 'Publish the project - $(buildConfiguration)'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
    zipAfterPublish: true

- task: WhiteSource Bolt@20
  displayName: 'Whitesource bolt'
  condition: |
            and(succeeded(),
            eq(variables['Build.Reason'], 'PullRequest'),
            eq(variables['System.PullRequest.TargetBranch'], 'master'))

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()